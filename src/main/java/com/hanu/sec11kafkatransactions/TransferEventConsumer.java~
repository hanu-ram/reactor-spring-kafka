package com.hanu.sec11kafkatransactions;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.kafka.receiver.KafkaReceiver;
import reactor.kafka.receiver.ReceiverRecord;
import reactor.kafka.sender.SenderRecord;

@Slf4j
@RequiredArgsConstructor
public class TransferEventConsumer {
    private final KafkaReceiver<String, String> kafkaReceiver;

    public Flux<TransferEvent> receive() {
        return kafkaReceiver.receive()
                .doOnNext(r -> log.info("key: {}, value: {}", r.key(), r.value()))
                .map(this::senderRecordToTransferEvent);
    }

    public TransferEvent senderRecordToTransferEvent(ReceiverRecord<String, String> receiverRecord) {
        var value = receiverRecord.value().split(",");
        var runnable = receiverRecord.key().equals("6") ? this.fail() : this.ack(receiverRecord);
        return new TransferEvent(
                receiverRecord.key(),
                value[0],
                value[1],
                value[2],
                runnable
                );
    }

    public Runnable ack(ReceiverRecord<String, String> receiverRecord) {
        return () -> receiverRecord.receiverOffset().acknowledge();
    }

    public Runnable fail() {
        return () -> {throw new RuntimeException("Error caused during processing");};
    }
}
